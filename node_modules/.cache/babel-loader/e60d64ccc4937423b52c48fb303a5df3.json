{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Projects\\\\food_app\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\n//It is simply to manage the card context data and provide that context to all components who want access to it\n// We can use this component to wrap all component that need access to the cart.In our case its all the components in App component\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedItems = state.items.concat(action.item); //I want to group item for the same meal together and manage the amount on a per meal bases\n    //items in current state snapshot and call concat(built in method of js which adds a new item to an array but return a new array)\n    //you want ot update your state in an immutable way\n\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; //update total amount for all egregetted cart items\n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    //this fumc is being called from some comp in our app with the appropriate data\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    }); //I am forwarding the item which I expect to get this in func to cartreducer func\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    //this will be context value which will be updated over time\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"sources":["D:/React Projects/food_app/src/store/CartProvider.js"],"sourcesContent":["//It is simply to manage the card context data and provide that context to all components who want access to it\r\n// We can use this component to wrap all component that need access to the cart.In our case its all the components in App component\r\n\r\nimport { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    const updatedItems = state.items.concat(action.item); //I want to group item for the same meal together and manage the amount on a per meal bases\r\n    //items in current state snapshot and call concat(built in method of js which adds a new item to an array but return a new array)\r\n    //you want ot update your state in an immutable way\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount; //update total amount for all egregetted cart items\r\n\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n      );\r\n      \r\n      const existingCartItem=state\r\n\r\n    return { items: updatedItems, totalAmount: updatedTotalAmount };\r\n  }\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    //this fumc is being called from some comp in our app with the appropriate data\r\n    dispatchCartAction({ type: \"ADD\", item: item }); //I am forwarding the item which I expect to get this in func to cartreducer func\r\n  };\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    //this will be context value which will be updated over time\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"],"mappings":";;;AAAA;AACA;AAEA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EADgB;EAEvBC,WAAW,EAAE;AAFU,CAAzB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACrC,IAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;IACzB,MAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB,CADyB,CAC6B;IACtD;IACA;;IACA,MAAMC,kBAAkB,GACtBN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MADtD,CAJyB,CAKqC;;IAE9D,MAAMC,qBAAqB,GAAGT,KAAK,CAACH,KAAN,CAAYa,SAAZ,CAC3BL,IAAD,IAAUA,IAAI,CAACM,EAAL,KAAYV,MAAM,CAACI,IAAP,CAAYM,EADN,CAA9B;IAIE,MAAMC,gBAAgB,GAACZ,KAAvB;IAEF,OAAO;MAAEH,KAAK,EAAEM,YAAT;MAAuBL,WAAW,EAAEQ;IAApC,CAAP;EACD;;EACD,OAAOV,gBAAP;AACD,CAjBD;;AAmBA,MAAMiB,YAAY,GAAIC,KAAD,IAAW;EAAA;;EAC9B,MAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCtB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;EAKA,MAAMqB,oBAAoB,GAAIZ,IAAD,IAAU;IACrC;IACAW,kBAAkB,CAAC;MAAEd,IAAI,EAAE,KAAR;MAAeG,IAAI,EAAEA;IAArB,CAAD,CAAlB,CAFqC,CAEY;EAClD,CAHD;;EAIA,MAAMa,yBAAyB,GAAIP,EAAD,IAAQ;IACxCK,kBAAkB,CAAC;MAAEd,IAAI,EAAE,QAAR;MAAkBS,EAAE,EAAEA;IAAtB,CAAD,CAAlB;EACD,CAFD;;EAIA,MAAMQ,WAAW,GAAG;IAClB;IACAtB,KAAK,EAAEkB,SAAS,CAAClB,KAFC;IAGlBC,WAAW,EAAEiB,SAAS,CAACjB,WAHL;IAIlBsB,OAAO,EAAEH,oBAJS;IAKlBI,UAAU,EAAEH;EALM,CAApB;EAQA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEC,WAA7B;IAAA,UACGL,KAAK,CAACQ;EADT;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA3BD;;GAAMT,Y;;KAAAA,Y;AA6BN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}