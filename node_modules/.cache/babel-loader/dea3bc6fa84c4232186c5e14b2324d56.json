{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Projects\\\\food_app\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\n//It is simply to manage the card context data and provide that context to all components who want access to it\n// We can use this component to wrap all component that need access to the cart.In our case its all the components in App component\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedItems = state.items.concat(action.item); //I want to group item for the same meal together and manage the amount on a per meal bases\n    //items in current state snapshot and call concat(built in method of js )\n\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; //update total amount for all egregetted cart items\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    }); //I am forwarding the item which I expect to get this in func to cartreducer func\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    //this will be context value which will be updated over time\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"sources":["D:/React Projects/food_app/src/store/CartProvider.js"],"sourcesContent":["//It is simply to manage the card context data and provide that context to all components who want access to it\r\n// We can use this component to wrap all component that need access to the cart.In our case its all the components in App component\r\n\r\nimport { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n    items: [],\r\n    totalAmount:0\r\n};\r\nconst cartReducer = (state, action) => {\r\n    if (action.type === 'ADD')\r\n    {\r\n        const updatedItems = state.items.concat(action.item);   //I want to group item for the same meal together and manage the amount on a per meal bases\r\n                            //items in current state snapshot and call concat(built in method of js )\r\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;  //update total amount for all egregetted cart items\r\n        return {items:updatedItems, totalAmount:updatedTotalAmount};\r\n    }\r\n    return defaultCartState;\r\n}\r\n\r\nconst CartProvider = (props) => {\r\n\r\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n    \r\n    const addItemToCartHandler = (item) => {\r\n        dispatchCartAction({ type: 'ADD', item: item });        //I am forwarding the item which I expect to get this in func to cartreducer func\r\n    };\r\n    const removeItemFromCartHandler = (id) => {\r\n        dispatchCartAction({ type: \"REMOVE\", id: id });\r\n     };\r\n    \r\n    const cartContext = {       //this will be context value which will be updated over time\r\n      items: cartState.items,\r\n      totalAmount: cartState.totalAmount,\r\n      addItem: addItemToCartHandler,\r\n      removeItem: removeItemFromCartHandler,\r\n    };\r\n\r\n    return (\r\n        <CartContext.Provider value={cartContext}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    );\r\n};\r\n\r\nexport default CartProvider;"],"mappings":";;;AAAA;AACA;AAEA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;EACrBC,KAAK,EAAE,EADc;EAErBC,WAAW,EAAC;AAFS,CAAzB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACnC,IAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EACA;IACI,MAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB,CADJ,CAC4D;IACpC;;IACpB,MAAMC,kBAAkB,GAAGN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA/E,CAHJ,CAG4F;;IACxF,OAAO;MAACX,KAAK,EAACM,YAAP;MAAqBL,WAAW,EAACQ;IAAjC,CAAP;EACH;;EACD,OAAOV,gBAAP;AACH,CATD;;AAWA,MAAMa,YAAY,GAAIC,KAAD,IAAW;EAAA;;EAE5B,MAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkClB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAlD;;EAEA,MAAMiB,oBAAoB,GAAIR,IAAD,IAAU;IACnCO,kBAAkB,CAAC;MAAEV,IAAI,EAAE,KAAR;MAAeG,IAAI,EAAEA;IAArB,CAAD,CAAlB,CADmC,CACqB;EAC3D,CAFD;;EAGA,MAAMS,yBAAyB,GAAIC,EAAD,IAAQ;IACtCH,kBAAkB,CAAC;MAAEV,IAAI,EAAE,QAAR;MAAkBa,EAAE,EAAEA;IAAtB,CAAD,CAAlB;EACF,CAFF;;EAIA,MAAMC,WAAW,GAAG;IAAQ;IAC1BnB,KAAK,EAAEc,SAAS,CAACd,KADC;IAElBC,WAAW,EAAEa,SAAS,CAACb,WAFL;IAGlBmB,OAAO,EAAEJ,oBAHS;IAIlBK,UAAU,EAAEJ;EAJM,CAApB;EAOA,oBACI,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEE,WAA7B;IAAA,UACKN,KAAK,CAACS;EADX;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAvBD;;GAAMV,Y;;KAAAA,Y;AAyBN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}